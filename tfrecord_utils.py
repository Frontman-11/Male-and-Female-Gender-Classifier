{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-08-13T01:22:00.798351Z\",\"iopub.execute_input\":\"2024-08-13T01:22:00.798725Z\",\"iopub.status.idle\":\"2024-08-13T01:22:18.839409Z\",\"shell.execute_reply.started\":\"2024-08-13T01:22:00.798694Z\",\"shell.execute_reply\":\"2024-08-13T01:22:18.838330Z\"}}\nimport tensorflow as tf\nimport cv2\nfrom contextlib import ExitStack\nfrom tensorflow.train import Feature, Features, Example\nfrom tensorflow.train import BytesList, Int64List\nimport concurrent.futures\nimport threading \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-08-13T01:25:44.208342Z\",\"iopub.execute_input\":\"2024-08-13T01:25:44.209019Z\",\"iopub.status.idle\":\"2024-08-13T01:25:44.228401Z\",\"shell.execute_reply.started\":\"2024-08-13T01:25:44.208978Z\",\"shell.execute_reply\":\"2024-08-13T01:25:44.226683Z\"}}\ndef create_example(image, label):\n    '''Returns example protobuf'''\n    serialised_image = tf.io.serialize_tensor(image)\n\n    return Example(\n                features = Features(\n                    feature = {\n                        'images': Feature(bytes_list=BytesList(value=[serialised_image.numpy()])),\n                        'label': Feature(int64_list=Int64List(value=[label]))\n                    }\n                )\n            )\n\n\ndef helper_func(parent_dir, filename, label):      \n    filepath = os.path.join(parent_dir, filename)\n    img = cv2.imread(filepath, flags=1)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    return create_example(img, label)\n\n\n\ndef write_tfrecord(parent_dir, idx, filename, file_count, n_shards, writers, label):   \n    example = helper_func(parent_dir, filename, label, writer_lock)\n    # Determine shard\n    shard = idx % n_shards\n    with writer_lock[shard]:\n        writers[shard].write(example.SerializeToString())\n#         file_count[0] += 1\n#         print(f'\\rProgress:{file_count[0]} of {len(os.listdir(parent_dir))}', end='', flush=True)        \n        \n#         if file_count[0]%10 == 0:\n#         with threading.Lock():\n#     print(f'\\rProgress:{file_count[0]} of {len(os.listdir(parent_dir))} \\t{(file_count[0]*100/len(os.listdir(parent_dir))):.2f}% complete', end='', flush=True)\n\n\n\ndef process_image(parent_dir, tfrecord_filename, label, n_shards=10, max_workers=3000):\n    file_count = [0]\n    count = [0]\n    \n    filenames = os.listdir(parent_dir)\n    pad = len(str(n_shards))\n    paths = [f'{tfrecord_filename}.tfrecord-{index+1:0{pad}d}-of-{n_shards:0{pad}d}' for index in range(n_shards)]        \n    writer_lock = [threading.Lock() for _ in range (20)]\n\n    with ExitStack() as stack:\n        writers = [stack.enter_context(tf.io.TFRecordWriter(path)) for path in paths]\n        try:\n            if __name__ == '__main__':        \n                with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:\n                    futures = [executor.submit(write_tfrecord, parent_dir, idx, filename, file_count, n_shards,writers,\n                                               label, writer_lock) for idx, filename in enumerate(filenames)]\n                    for future in concurrent.futures.as_completed(futures):\n                        future.result()                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n            else:\n                raise ValueError('Name not equal to __main__')\n                \n        except ResourceExhaustedError as e:\n            print('\\nProgram stopped due to limited storage space')\n            return e\n    print('done writing')   ","metadata":{"_uuid":"3c54b1a4-a26a-4eff-9aa2-c1391970e230","_cell_guid":"f0bf803a-b5f1-4d3b-9088-6cecf2f97883","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}